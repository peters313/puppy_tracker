"use strict";
var RemovePluginCommand = (function () {
    function RemovePluginCommand($pluginsService, $errors, $logger, $projectData) {
        this.$pluginsService = $pluginsService;
        this.$errors = $errors;
        this.$logger = $logger;
        this.$projectData = $projectData;
        this.allowedParameters = [];
    }
    RemovePluginCommand.prototype.execute = function (args) {
        return this.$pluginsService.remove(args[0]);
    };
    RemovePluginCommand.prototype.canExecute = function (args) {
        var _this = this;
        return (function () {
            if (!args[0]) {
                _this.$errors.fail("You must specify plugin name.");
            }
            var pluginNames = [];
            try {
                var installedPlugins = _this.$pluginsService.getAllInstalledPlugins().wait();
                pluginNames = installedPlugins.map(function (pl) { return pl.name; });
            }
            catch (err) {
                _this.$logger.trace("Error while installing plugins. Error is:", err);
                pluginNames = _.keys(_this.$projectData.dependencies);
            }
            var pluginName = args[0].toLowerCase();
            if (!_.any(pluginNames, function (name) { return name.toLowerCase() === pluginName; })) {
                _this.$errors.failWithoutHelp("Plugin \"" + pluginName + "\" is not installed.");
            }
            return true;
        }).future()();
    };
    return RemovePluginCommand;
}());
exports.RemovePluginCommand = RemovePluginCommand;
$injector.registerCommand("plugin|remove", RemovePluginCommand);
