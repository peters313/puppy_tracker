"use strict";
var os_1 = require("os");
var constants = require("./constants");
var XmlValidator = (function () {
    function XmlValidator($fs, $logger) {
        this.$fs = $fs;
        this.$logger = $logger;
    }
    XmlValidator.prototype.validateXmlFiles = function (sourceFiles) {
        var _this = this;
        return (function () {
            var xmlHasErrors = false;
            sourceFiles
                .filter(function (file) { return _.endsWith(file, constants.XML_FILE_EXTENSION); })
                .forEach(function (file) {
                var errorOutput = _this.getXmlFileErrors(file).wait();
                var hasErrors = !!errorOutput;
                xmlHasErrors = xmlHasErrors || hasErrors;
                if (hasErrors) {
                    _this.$logger.info((file + " has syntax errors.").red.bold);
                    _this.$logger.out(errorOutput.yellow);
                }
            });
            return !xmlHasErrors;
        }).future()();
    };
    XmlValidator.prototype.getXmlFileErrors = function (sourceFile) {
        var _this = this;
        return (function () {
            var errorOutput = "";
            var fileContents = _this.$fs.readText(sourceFile).wait();
            var domErrorHandler = function (level, msg) {
                errorOutput += level + os_1.EOL + msg + os_1.EOL;
            };
            _this.getDomParser(domErrorHandler).parseFromString(fileContents, "text/xml");
            return errorOutput || null;
        }).future()();
    };
    XmlValidator.prototype.getDomParser = function (errorHandler) {
        var DomParser = require("xmldom").DOMParser;
        var parser = new DomParser({
            locator: {},
            errorHandler: errorHandler
        });
        return parser;
    };
    return XmlValidator;
}());
exports.XmlValidator = XmlValidator;
$injector.register("xmlValidator", XmlValidator);
