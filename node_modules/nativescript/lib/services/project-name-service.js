"use strict";
var helpers_1 = require("../common/helpers");
var ProjectNameService = (function () {
    function ProjectNameService($projectNameValidator, $errors, $logger, $prompter) {
        this.$projectNameValidator = $projectNameValidator;
        this.$errors = $errors;
        this.$logger = $logger;
        this.$prompter = $prompter;
    }
    ProjectNameService.prototype.ensureValidName = function (projectName, validateOptions) {
        var _this = this;
        return (function () {
            if (validateOptions && validateOptions.force) {
                return projectName;
            }
            if (!_this.$projectNameValidator.validate(projectName)) {
                return _this.promptForNewName("The project name is invalid.", projectName, validateOptions).wait();
            }
            var userCanInteract = helpers_1.isInteractive();
            if (!_this.checkIfNameStartsWithLetter(projectName)) {
                if (!userCanInteract) {
                    _this.$errors.fail("The project name does not start with letter and will fail to build for Android. If You want to create project with this name add --force to the create command.");
                }
                return _this.promptForNewName("The project name does not start with letter and will fail to build for Android.", projectName, validateOptions).wait();
            }
            if (projectName.toUpperCase() === "APP") {
                if (!userCanInteract) {
                    _this.$errors.fail("You cannot build applications named 'app' in Xcode. Consider creating a project with different name. If You want to create project with this name add --force to the create command.");
                }
                return _this.promptForNewName("You cannot build applications named 'app' in Xcode. Consider creating a project with different name.", projectName, validateOptions).wait();
            }
            return projectName;
        }).future()();
    };
    ProjectNameService.prototype.checkIfNameStartsWithLetter = function (projectName) {
        var startsWithLetterExpression = /^[a-zA-Z]/;
        return startsWithLetterExpression.test(projectName);
    };
    ProjectNameService.prototype.promptForNewName = function (warningMessage, projectName, validateOptions) {
        var _this = this;
        return (function () {
            if (_this.promptForForceNameConfirm(warningMessage).wait()) {
                return projectName;
            }
            var newProjectName = _this.$prompter.getString("Enter the new project name:").wait();
            return _this.ensureValidName(newProjectName, validateOptions).wait();
        }).future()();
    };
    ProjectNameService.prototype.promptForForceNameConfirm = function (warningMessage) {
        var _this = this;
        return (function () {
            _this.$logger.warn(warningMessage);
            return _this.$prompter.confirm("Do you want to create the project with this name?").wait();
        }).future()();
    };
    return ProjectNameService;
}());
exports.ProjectNameService = ProjectNameService;
$injector.register("projectNameService", ProjectNameService);
