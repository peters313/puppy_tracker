"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var liveSyncServiceBaseLib = require("./livesync-service-base");
var helpers = require("../../common/helpers");
var net = require("net");
var currentPageReloadId = 0;
var IOSLiveSyncService = (function (_super) {
    __extends(IOSLiveSyncService, _super);
    function IOSLiveSyncService(_device, $iOSSocketRequestExecutor, $iOSNotification, $iOSEmulatorServices, $injector, $logger, $options) {
        _super.call(this, _device);
        this.$iOSSocketRequestExecutor = $iOSSocketRequestExecutor;
        this.$iOSNotification = $iOSNotification;
        this.$iOSEmulatorServices = $iOSEmulatorServices;
        this.$injector = $injector;
        this.$logger = $logger;
        this.$options = $options;
    }
    IOSLiveSyncService.prototype.afterInstallApplicationAction = function (deviceAppData, localToDevicePaths) {
        var _this = this;
        return (function () {
            return _this.$options.watch;
        }).future()();
    };
    IOSLiveSyncService.prototype.removeFiles = function (appIdentifier, localToDevicePaths) {
        var _this = this;
        return (function () {
            _.each(localToDevicePaths, function (localToDevicePathData) { return _this.device.fileSystem.deleteFile(localToDevicePathData.getDevicePath(), appIdentifier); });
        }).future()();
    };
    IOSLiveSyncService.prototype.restartApplication = function (deviceAppData) {
        var projectData = this.$injector.resolve("projectData");
        return this.device.applicationManager.restartApplication(deviceAppData.appIdentifier, projectData.projectName);
    };
    IOSLiveSyncService.prototype.reloadPage = function (deviceAppData) {
        var _this = this;
        return (function () {
            var timeout = 9000;
            if (_this.device.isEmulator) {
                if (!_this.socket) {
                    helpers.connectEventually(function () { return net.connect(IOSLiveSyncService.BACKEND_PORT); }, function (socket) {
                        _this.socket = socket;
                        _this.attachEventHandlersIfNecessary();
                        _this.sendPageReloadMessage();
                    });
                }
                else {
                    _this.sendPageReloadMessage();
                }
                _this.$iOSEmulatorServices.postDarwinNotification(_this.$iOSNotification.attachRequest).wait();
            }
            else {
                if (!_this.socket) {
                    _this.$iOSSocketRequestExecutor.executeAttachRequest(_this.device, timeout).wait();
                    _this.socket = _this.device.connectToPort(IOSLiveSyncService.BACKEND_PORT);
                    _this.attachEventHandlersIfNecessary();
                }
                _this.sendPageReloadMessage();
            }
        }).future()();
    };
    IOSLiveSyncService.prototype.attachEventHandlersIfNecessary = function () {
        if (this.$options.watch) {
            this.attachProcessExitHandlers();
            this.attachSocketCloseEvent();
        }
    };
    IOSLiveSyncService.prototype.attachSocketCloseEvent = function () {
        var _this = this;
        this.socket.on("close", function (hadError) {
            _this.$logger.trace("Socket closed, hadError is " + hadError + ".");
            _this.socket = null;
        });
    };
    IOSLiveSyncService.prototype.sendPageReloadMessage = function () {
        var _this = this;
        try {
            this.sendPageReloadMessageCore();
            this.socket.on("data", function (data) {
                _this.$logger.trace("Socket sent data: " + data.toString());
                _this.destroySocketIfNecessary();
            });
        }
        catch (err) {
            this.$logger.trace("Error while sending page reload:", err);
            this.destroySocketIfNecessary();
        }
    };
    IOSLiveSyncService.prototype.sendPageReloadMessageCore = function () {
        var message = "{ \"method\":\"Page.reload\",\"params\":{\"ignoreCache\":false},\"id\":" + ++currentPageReloadId + " }";
        var length = Buffer.byteLength(message, "utf16le");
        var payload = new Buffer(length + 4);
        payload.writeInt32BE(length, 0);
        payload.write(message, 4, length, "utf16le");
        this.socket.write(payload);
    };
    IOSLiveSyncService.prototype.attachProcessExitHandlers = function () {
        var _this = this;
        process.on("exit", function (exitCode) {
            _this.destroySocket();
        });
        process.on("SIGTERM", function () {
            _this.destroySocket();
        });
        process.on("SIGINT", function () {
            _this.destroySocket();
            return process.exit();
        });
    };
    IOSLiveSyncService.prototype.destroySocketIfNecessary = function () {
        if (!this.$options.watch) {
            this.destroySocket();
        }
    };
    IOSLiveSyncService.prototype.destroySocket = function () {
        if (this.socket) {
            this.socket.destroy();
            this.socket = null;
        }
    };
    IOSLiveSyncService.BACKEND_PORT = 18181;
    return IOSLiveSyncService;
}(liveSyncServiceBaseLib.LiveSyncServiceBase));
$injector.register("iosLiveSyncServiceLocator", { factory: IOSLiveSyncService });
