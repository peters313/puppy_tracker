"use strict";
var path = require("path");
var temp = require("temp");
var constants = require("../constants");
var os_1 = require("os");
temp.track();
var ProjectTemplatesService = (function () {
    function ProjectTemplatesService($errors, $fs, $logger, $npm, $npmInstallationManager) {
        this.$errors = $errors;
        this.$fs = $fs;
        this.$logger = $logger;
        this.$npm = $npm;
        this.$npmInstallationManager = $npmInstallationManager;
    }
    Object.defineProperty(ProjectTemplatesService.prototype, "defaultTemplatePath", {
        get: function () {
            return this.prepareNativeScriptTemplate(ProjectTemplatesService.RESERVED_TEMPLATE_NAMES["default"]);
        },
        enumerable: true,
        configurable: true
    });
    ProjectTemplatesService.prototype.prepareTemplate = function (originalTemplateName) {
        var _this = this;
        return (function () {
            var realTemplatePath;
            if (originalTemplateName) {
                var templateName = originalTemplateName.toLowerCase();
                var _a = templateName.split("@"), name_1 = _a[0], version = _a[1];
                if (ProjectTemplatesService.RESERVED_TEMPLATE_NAMES[name_1]) {
                    realTemplatePath = _this.prepareNativeScriptTemplate(ProjectTemplatesService.RESERVED_TEMPLATE_NAMES[name_1], version).wait();
                }
                else {
                    var tempDir = temp.mkdirSync("nativescript-template-dir");
                    try {
                        _this.$npm.install(originalTemplateName, tempDir, { production: true, silent: true }).wait();
                    }
                    catch (err) {
                        _this.$logger.trace(err);
                        _this.$errors.failWithoutHelp(("Unable to use template " + originalTemplateName + ". Make sure you've specified valid name, github URL or path to local dir.") +
                            (os_1.EOL + "Error is: " + err.message + "."));
                    }
                    realTemplatePath = _this.getTemplatePathFromTempDir(tempDir).wait();
                }
            }
            else {
                realTemplatePath = _this.defaultTemplatePath.wait();
            }
            if (realTemplatePath) {
                _this.$fs.deleteDirectory(path.join(realTemplatePath, constants.NODE_MODULES_FOLDER_NAME)).wait();
                return realTemplatePath;
            }
            _this.$errors.failWithoutHelp("Unable to find the template in temp directory. " +
                "Please open an issue at https://github.com/NativeScript/nativescript-cli/issues and send the output of the same command executed with --log trace.");
        }).future()();
    };
    ProjectTemplatesService.prototype.prepareNativeScriptTemplate = function (templateName, version) {
        this.$logger.trace("Using NativeScript verified template: " + templateName + " with version " + version + ".");
        return this.$npmInstallationManager.install(templateName, { version: version });
    };
    ProjectTemplatesService.prototype.getTemplatePathFromTempDir = function (tempDir) {
        var _this = this;
        return (function () {
            var templatePath;
            var tempDirContents = _this.$fs.readDirectory(tempDir).wait();
            _this.$logger.trace("TempDir contents: " + tempDirContents + ".");
            if (tempDirContents && tempDirContents.length === 1) {
                var tempDirSubdir = _.first(tempDirContents);
                if (tempDirSubdir === constants.NODE_MODULES_FOLDER_NAME) {
                    var templateDirName = _.first(_this.$fs.readDirectory(path.join(tempDir, constants.NODE_MODULES_FOLDER_NAME)).wait());
                    if (templateDirName) {
                        templatePath = path.join(tempDir, tempDirSubdir, templateDirName);
                    }
                }
                else {
                    templatePath = path.join(tempDir, tempDirSubdir);
                }
            }
            return templatePath;
        }).future()();
    };
    ProjectTemplatesService.RESERVED_TEMPLATE_NAMES = {
        "default": "tns-template-hello-world",
        "tsc": "tns-template-hello-world-ts",
        "typescript": "tns-template-hello-world-ts",
        "ng": "tns-template-hello-world-ng",
        "angular": "tns-template-hello-world-ng"
    };
    return ProjectTemplatesService;
}());
exports.ProjectTemplatesService = ProjectTemplatesService;
$injector.register("projectTemplatesService", ProjectTemplatesService);
