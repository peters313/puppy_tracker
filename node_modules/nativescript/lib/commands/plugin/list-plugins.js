"use strict";
var helpers_1 = require("../../common/helpers");
var ListPluginsCommand = (function () {
    function ListPluginsCommand($pluginsService, $logger) {
        this.$pluginsService = $pluginsService;
        this.$logger = $logger;
        this.allowedParameters = [];
    }
    ListPluginsCommand.prototype.execute = function (args) {
        var _this = this;
        return (function () {
            var installedPlugins = _this.$pluginsService.getDependenciesFromPackageJson().wait();
            var headers = ["Plugin", "Version"];
            var dependenciesData = _this.createTableCells(installedPlugins.dependencies);
            var dependenciesTable = helpers_1.createTable(headers, dependenciesData);
            _this.$logger.out("Dependencies:");
            _this.$logger.out(dependenciesTable.toString());
            if (installedPlugins.devDependencies && installedPlugins.devDependencies.length) {
                var devDependenciesData = _this.createTableCells(installedPlugins.devDependencies);
                var devDependenciesTable = helpers_1.createTable(headers, devDependenciesData);
                _this.$logger.out("Dev Dependencies:");
                _this.$logger.out(devDependenciesTable.toString());
            }
            else {
                _this.$logger.out("There are no dev dependencies.");
            }
            var viewDependenciesCommand = "npm view <pluginName> grep dependencies".cyan.toString();
            var viewDevDependenciesCommand = "npm view <pluginName> grep devDependencies".cyan.toString();
            _this.$logger.warn("NOTE:");
            _this.$logger.warn("If you want to check the dependencies of installed plugin use " + viewDependenciesCommand);
            _this.$logger.warn("If you want to check the dev dependencies of installed plugin use " + viewDevDependenciesCommand);
        }).future()();
    };
    ListPluginsCommand.prototype.createTableCells = function (items) {
        return items.map(function (item) { return [item.name, item.version]; });
    };
    return ListPluginsCommand;
}());
exports.ListPluginsCommand = ListPluginsCommand;
$injector.registerCommand("plugin|*list", ListPluginsCommand);
