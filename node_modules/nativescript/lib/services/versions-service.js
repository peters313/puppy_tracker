"use strict";
var constants = require("../constants");
var semver = require("semver");
var path = require("path");
var helpers_1 = require("../common/helpers");
var VersionsService = (function () {
    function VersionsService($fs, $npmInstallationManager, $injector, $staticConfig, $pluginsService) {
        this.$fs = $fs;
        this.$npmInstallationManager = $npmInstallationManager;
        this.$injector = $injector;
        this.$staticConfig = $staticConfig;
        this.$pluginsService = $pluginsService;
        this.projectData = this.getProjectData();
    }
    VersionsService.prototype.getNativescriptCliVersion = function () {
        var _this = this;
        return (function () {
            var currentCliVersion = _this.$staticConfig.version;
            var latestCliVersion = _this.$npmInstallationManager.getLatestVersion(constants.NATIVESCRIPT_KEY_NAME).wait();
            return {
                componentName: constants.NATIVESCRIPT_KEY_NAME,
                currentVersion: currentCliVersion,
                latestVersion: latestCliVersion
            };
        }).future()();
    };
    VersionsService.prototype.getTnsCoreModulesVersion = function () {
        var _this = this;
        return (function () {
            var latestTnsCoreModulesVersion = _this.$npmInstallationManager.getLatestVersion(constants.TNS_CORE_MODULES_NAME).wait();
            var nativescriptCoreModulesInfo = {
                componentName: constants.TNS_CORE_MODULES_NAME,
                latestVersion: latestTnsCoreModulesVersion
            };
            if (_this.projectData) {
                var nodeModulesPath = path.join(_this.projectData.projectDir, constants.NODE_MODULES_FOLDER_NAME);
                var tnsCoreModulesPath = path.join(nodeModulesPath, constants.TNS_CORE_MODULES_NAME);
                if (!_this.$fs.exists(nodeModulesPath).wait() ||
                    !_this.$fs.exists(tnsCoreModulesPath).wait()) {
                    _this.$pluginsService.ensureAllDependenciesAreInstalled().wait();
                }
                var currentTnsCoreModulesVersion = _this.$fs.readJson(path.join(tnsCoreModulesPath, constants.PACKAGE_JSON_FILE_NAME)).wait().version;
                nativescriptCoreModulesInfo.currentVersion = currentTnsCoreModulesVersion;
            }
            return nativescriptCoreModulesInfo;
        }).future()();
    };
    VersionsService.prototype.getRuntimesVersions = function () {
        var _this = this;
        return (function () {
            var runtimes = [
                constants.TNS_ANDROID_RUNTIME_NAME,
                constants.TNS_IOS_RUNTIME_NAME
            ];
            var projectConfig;
            if (_this.projectData) {
                projectConfig = _this.$fs.readJson(_this.projectData.projectFilePath).wait();
            }
            var runtimesVersions = runtimes.map(function (runtime) {
                var latestRuntimeVersion = _this.$npmInstallationManager.getLatestVersion(runtime).wait();
                var runtimeInformation = {
                    componentName: runtime,
                    latestVersion: latestRuntimeVersion
                };
                if (projectConfig) {
                    var projectRuntimeInformation = projectConfig.nativescript && projectConfig.nativescript[runtime];
                    if (projectRuntimeInformation) {
                        var runtimeVersionInProject = projectRuntimeInformation.version;
                        runtimeInformation.currentVersion = runtimeVersionInProject;
                    }
                }
                return runtimeInformation;
            });
            return runtimesVersions;
        }).future()();
    };
    VersionsService.prototype.getComponentsForUpdate = function () {
        var _this = this;
        return (function () {
            var allComponents = _this.getAllComponentsVersions().wait();
            var componentsForUpdate = [];
            _.forEach(allComponents, function (component) {
                if (component.currentVersion && _this.hasUpdate(component)) {
                    componentsForUpdate.push(component);
                }
            });
            return componentsForUpdate;
        }).future()();
    };
    VersionsService.prototype.getAllComponentsVersions = function () {
        var _this = this;
        return (function () {
            var allComponents = [];
            var nativescriptCliInformation = _this.getNativescriptCliVersion().wait();
            if (nativescriptCliInformation) {
                allComponents.push(nativescriptCliInformation);
            }
            var nativescriptCoreModulesInformation = _this.getTnsCoreModulesVersion().wait();
            if (nativescriptCoreModulesInformation) {
                allComponents.push(nativescriptCoreModulesInformation);
            }
            var runtimesVersions = _this.getRuntimesVersions().wait();
            allComponents = allComponents.concat(runtimesVersions);
            return allComponents;
        }).future()();
    };
    VersionsService.prototype.createTableWithVersionsInformation = function (versionsInformation) {
        var headers = ["Component", "Current version", "Latest version", "Information"];
        var data = [];
        _.forEach(versionsInformation, function (componentInformation) {
            var row = [
                componentInformation.componentName,
                componentInformation.currentVersion,
                componentInformation.latestVersion
            ];
            if (componentInformation.currentVersion) {
                semver.lt(componentInformation.currentVersion, componentInformation.latestVersion) ? row.push(VersionsService.UPDATE_AVAILABLE_MESSAGE) : row.push(VersionsService.UP_TO_DATE_MESSAGE);
            }
            else {
                row.push(VersionsService.NOT_INSTALLED_MESSAGE);
            }
            data.push(row);
        });
        return helpers_1.createTable(headers, data);
    };
    VersionsService.prototype.getProjectData = function () {
        try {
            return this.$injector.resolve("projectData");
        }
        catch (error) {
            return null;
        }
    };
    VersionsService.prototype.hasUpdate = function (component) {
        return semver.lt(component.currentVersion, component.latestVersion);
    };
    VersionsService.UP_TO_DATE_MESSAGE = "Up to date".green.toString();
    VersionsService.UPDATE_AVAILABLE_MESSAGE = "Update available".yellow.toString();
    VersionsService.NOT_INSTALLED_MESSAGE = "Not installed".grey.toString();
    return VersionsService;
}());
$injector.register("versionsService", VersionsService);
