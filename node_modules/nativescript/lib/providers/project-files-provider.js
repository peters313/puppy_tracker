"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var minimatch = require("minimatch");
var constants = require("../constants");
var path = require("path");
var project_files_provider_base_1 = require("../common/services/project-files-provider-base");
var ProjectFilesProvider = (function (_super) {
    __extends(ProjectFilesProvider, _super);
    function ProjectFilesProvider($platformsData, $projectData, $mobileHelper, $options) {
        _super.call(this, $mobileHelper, $options);
        this.$platformsData = $platformsData;
        this.$projectData = $projectData;
    }
    ProjectFilesProvider.prototype.mapFilePath = function (filePath, platform) {
        var platformData = this.$platformsData.getPlatformData(platform.toLowerCase());
        var projectFilesPath = path.join(platformData.appDestinationDirectoryPath, constants.APP_FOLDER_NAME);
        var parsedFilePath = this.getPreparedFilePath(filePath);
        var mappedFilePath = path.join(projectFilesPath, path.relative(path.join(this.$projectData.projectDir, constants.APP_FOLDER_NAME), parsedFilePath));
        var appResourcesDirectoryPath = path.join(constants.APP_FOLDER_NAME, constants.APP_RESOURCES_FOLDER_NAME);
        var platformSpecificAppResourcesDirectoryPath = path.join(appResourcesDirectoryPath, platformData.normalizedPlatformName);
        if (parsedFilePath.indexOf(appResourcesDirectoryPath) > -1 && parsedFilePath.indexOf(platformSpecificAppResourcesDirectoryPath) === -1) {
            return null;
        }
        if (parsedFilePath.indexOf(platformSpecificAppResourcesDirectoryPath) > -1) {
            var appResourcesRelativePath = path.relative(path.join(this.$projectData.projectDir, constants.APP_FOLDER_NAME, constants.APP_RESOURCES_FOLDER_NAME, platformData.normalizedPlatformName), parsedFilePath);
            mappedFilePath = path.join(platformData.platformProjectService.getAppResourcesDestinationDirectoryPath().wait(), appResourcesRelativePath);
        }
        return mappedFilePath;
    };
    ProjectFilesProvider.prototype.isFileExcluded = function (filePath) {
        return !!_.find(ProjectFilesProvider.INTERNAL_NONPROJECT_FILES, function (pattern) { return minimatch(filePath, pattern, { nocase: true }); });
    };
    ProjectFilesProvider.INTERNAL_NONPROJECT_FILES = ["**/*.ts"];
    return ProjectFilesProvider;
}(project_files_provider_base_1.ProjectFilesProviderBase));
exports.ProjectFilesProvider = ProjectFilesProvider;
$injector.register("projectFilesProvider", ProjectFilesProvider);
