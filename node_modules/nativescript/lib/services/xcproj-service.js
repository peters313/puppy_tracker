"use strict";
var semver = require("semver");
var helpers = require("../common/helpers");
var os_1 = require("os");
var XcprojService = (function () {
    function XcprojService($childProcess, $errors, $logger, $staticConfig, $sysInfo, $xcodeSelectService) {
        this.$childProcess = $childProcess;
        this.$errors = $errors;
        this.$logger = $logger;
        this.$staticConfig = $staticConfig;
        this.$sysInfo = $sysInfo;
        this.$xcodeSelectService = $xcodeSelectService;
    }
    XcprojService.prototype.verifyXcproj = function (shouldFail) {
        var _this = this;
        return (function () {
            var xcprojInfo = _this.getXcprojInfo().wait();
            if (xcprojInfo.shouldUseXcproj && !xcprojInfo.xcprojAvailable) {
                var errorMessage = "You are using CocoaPods version " + xcprojInfo.cocoapodVer + " which does not support Xcode " + xcprojInfo.xcodeVersion.major + "." + xcprojInfo.xcodeVersion.minor + " yet." + os_1.EOL + os_1.EOL + "You can update your cocoapods by running $sudo gem install cocoapods from a terminal." + os_1.EOL + os_1.EOL + "In order for the NativeScript CLI to be able to work correctly with this setup you need to install xcproj command line tool and add it to your PATH. Xcproj can be installed with homebrew by running $ brew install xcproj from the terminal";
                if (shouldFail) {
                    _this.$errors.failWithoutHelp(errorMessage);
                }
                else {
                    _this.$logger.warn(errorMessage);
                }
                return true;
            }
            return false;
        }).future()();
    };
    XcprojService.prototype.getXcprojInfo = function () {
        var _this = this;
        return (function () {
            if (!_this.xcprojInfoCache) {
                var cocoapodVer = _this.$sysInfo.getCocoapodVersion().wait(), xcodeVersion = _this.$xcodeSelectService.getXcodeVersion().wait();
                if (cocoapodVer && !semver.valid(cocoapodVer)) {
                    cocoapodVer = _.take(cocoapodVer.split("."), 3).join(".");
                }
                xcodeVersion.patch = xcodeVersion.patch || "0";
                var shouldUseXcproj = cocoapodVer && !!(semver.lt(cocoapodVer, "1.0.0") && ~helpers.versionCompare(xcodeVersion, "7.3.0")), xcprojAvailable = void 0;
                if (shouldUseXcproj) {
                    try {
                        _this.$childProcess.exec("xcproj --version").wait();
                        xcprojAvailable = true;
                    }
                    catch (e) {
                        xcprojAvailable = false;
                    }
                }
                _this.xcprojInfoCache = { cocoapodVer: cocoapodVer, xcodeVersion: xcodeVersion, shouldUseXcproj: shouldUseXcproj, xcprojAvailable: xcprojAvailable };
            }
            return _this.xcprojInfoCache;
        }).future()();
    };
    return XcprojService;
}());
$injector.register("xcprojService", XcprojService);
