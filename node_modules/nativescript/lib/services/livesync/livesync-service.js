"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var constants = require("../../constants");
var helpers = require("../../common/helpers");
var path = require("path");
var semver = require("semver");
var LiveSyncService = (function () {
    function LiveSyncService($devicePlatformsConstants, $errors, $liveSyncServiceBase, $platformsData, $platformService, $projectData, $projectDataService, $prompter, $injector, $options) {
        this.$devicePlatformsConstants = $devicePlatformsConstants;
        this.$errors = $errors;
        this.$liveSyncServiceBase = $liveSyncServiceBase;
        this.$platformsData = $platformsData;
        this.$platformService = $platformService;
        this.$projectData = $projectData;
        this.$projectDataService = $projectDataService;
        this.$prompter = $prompter;
        this.$injector = $injector;
        this.$options = $options;
        this.forceExecuteFullSync = false;
        this._isInitialized = false;
    }
    LiveSyncService.prototype.ensureAndroidFrameworkVersion = function (platformData) {
        var _this = this;
        return (function () {
            _this.$projectDataService.initialize(_this.$projectData.projectDir);
            var frameworkVersion = _this.$projectDataService.getValue(platformData.frameworkPackageName).wait().version;
            if (platformData.normalizedPlatformName.toLowerCase() === _this.$devicePlatformsConstants.Android.toLowerCase()) {
                if (semver.lt(frameworkVersion, "1.2.1")) {
                    var shouldUpdate = _this.$prompter.confirm("You need Android Runtime 1.2.1 or later for LiveSync to work properly. Do you want to update your runtime now?").wait();
                    if (shouldUpdate) {
                        _this.$platformService.updatePlatforms([_this.$devicePlatformsConstants.Android.toLowerCase()]).wait();
                    }
                    else {
                        return;
                    }
                }
            }
        }).future()();
    };
    Object.defineProperty(LiveSyncService.prototype, "isInitialized", {
        get: function () {
            return this._isInitialized;
        },
        enumerable: true,
        configurable: true
    });
    LiveSyncService.prototype.liveSync = function (platform) {
        var _this = this;
        return (function () {
            platform = _this.$liveSyncServiceBase.getPlatform(platform).wait();
            var platformLowerCase = platform.toLowerCase();
            if (!_this.$platformService.preparePlatform(platformLowerCase).wait()) {
                _this.$errors.failWithoutHelp("Verify that listed files are well-formed and try again the operation.");
            }
            _this._isInitialized = true;
            _this.liveSyncCore(platform).wait();
        }).future()();
    };
    LiveSyncService.prototype.liveSyncCore = function (platform) {
        var _this = this;
        return (function () {
            var platformData = _this.$platformsData.getPlatformData(platform.toLowerCase());
            _this.ensureAndroidFrameworkVersion(platformData).wait();
            var liveSyncData = {
                platform: platform,
                appIdentifier: _this.$projectData.projectId,
                projectFilesPath: path.join(platformData.appDestinationDirectoryPath, constants.APP_FOLDER_NAME),
                syncWorkingDirectory: path.join(_this.$projectData.projectDir, constants.APP_FOLDER_NAME),
                excludedProjectDirsAndFiles: _this.$options.release ? constants.LIVESYNC_EXCLUDED_FILE_PATTERNS : [],
                forceExecuteFullSync: _this.forceExecuteFullSync
            };
            _this.$liveSyncServiceBase.sync(liveSyncData).wait();
        }).future()();
    };
    __decorate([
        helpers.hook('livesync')
    ], LiveSyncService.prototype, "liveSyncCore", null);
    return LiveSyncService;
}());
$injector.register("usbLiveSyncService", LiveSyncService);
