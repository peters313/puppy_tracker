"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var deviceAppDataBaseLib = require("../common/mobile/device-app-data/device-app-data-base");
var Future = require("fibers/future");
var path = require("path");
var android_device_hash_service_1 = require("../common/mobile/android/android-device-hash-service");
var device_android_debug_bridge_1 = require("../common/mobile/android/device-android-debug-bridge");
var SYNC_DIR_NAME = "sync";
var FULLSYNC_DIR_NAME = "fullsync";
var IOSAppIdentifier = (function (_super) {
    __extends(IOSAppIdentifier, _super);
    function IOSAppIdentifier(_appIdentifier, device, platform, $iOSSimResolver) {
        _super.call(this, _appIdentifier);
        this.device = device;
        this.platform = platform;
        this.$iOSSimResolver = $iOSSimResolver;
        this._deviceProjectRootPath = null;
    }
    Object.defineProperty(IOSAppIdentifier.prototype, "deviceProjectRootPath", {
        get: function () {
            if (!this._deviceProjectRootPath) {
                if (this.device.isEmulator) {
                    var applicationPath = this.$iOSSimResolver.iOSSim.getApplicationPath(this.device.deviceInfo.identifier, this.appIdentifier);
                    this._deviceProjectRootPath = path.join(applicationPath, "app");
                }
                else {
                    this._deviceProjectRootPath = IOSAppIdentifier.DEVICE_PROJECT_ROOT_PATH;
                }
            }
            return this.getDeviceProjectRootPath(this._deviceProjectRootPath);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IOSAppIdentifier.prototype, "deviceSyncZipPath", {
        get: function () {
            if (this.device.isEmulator) {
                return undefined;
            }
            else {
                return "Library/Application Support/LiveSync/sync.zip";
            }
        },
        enumerable: true,
        configurable: true
    });
    IOSAppIdentifier.prototype.isLiveSyncSupported = function () {
        return Future.fromResult(true);
    };
    IOSAppIdentifier.DEVICE_PROJECT_ROOT_PATH = "Library/Application Support/LiveSync/app";
    return IOSAppIdentifier;
}(deviceAppDataBaseLib.DeviceAppDataBase));
exports.IOSAppIdentifier = IOSAppIdentifier;
var AndroidAppIdentifier = (function (_super) {
    __extends(AndroidAppIdentifier, _super);
    function AndroidAppIdentifier(_appIdentifier, device, platform, $options, $injector) {
        _super.call(this, _appIdentifier);
        this.device = device;
        this.platform = platform;
        this.$options = $options;
        this.$injector = $injector;
    }
    Object.defineProperty(AndroidAppIdentifier.prototype, "deviceProjectRootPath", {
        get: function () {
            if (!this._deviceProjectRootPath) {
                var syncFolderName = this.getSyncFolderName().wait();
                this._deviceProjectRootPath = "/data/local/tmp/" + this.appIdentifier + "/" + syncFolderName;
            }
            return this._deviceProjectRootPath;
        },
        enumerable: true,
        configurable: true
    });
    AndroidAppIdentifier.prototype.isLiveSyncSupported = function () {
        return Future.fromResult(true);
    };
    AndroidAppIdentifier.prototype.getSyncFolderName = function () {
        var _this = this;
        return (function () {
            var adb = _this.$injector.resolve(device_android_debug_bridge_1.DeviceAndroidDebugBridge, { identifier: _this.device.deviceInfo.identifier });
            var deviceHashService = _this.$injector.resolve(android_device_hash_service_1.AndroidDeviceHashService, { adb: adb, appIdentifier: _this.appIdentifier });
            var hashFile = _this.$options.force ? null : deviceHashService.doesShasumFileExistsOnDevice().wait();
            return _this.$options.watch || hashFile ? SYNC_DIR_NAME : FULLSYNC_DIR_NAME;
        }).future()();
    };
    return AndroidAppIdentifier;
}(deviceAppDataBaseLib.DeviceAppDataBase));
exports.AndroidAppIdentifier = AndroidAppIdentifier;
var DeviceAppDataProvider = (function () {
    function DeviceAppDataProvider() {
    }
    DeviceAppDataProvider.prototype.createFactoryRules = function () {
        return {
            iOS: {
                vanilla: IOSAppIdentifier
            },
            Android: {
                vanilla: AndroidAppIdentifier
            }
        };
    };
    return DeviceAppDataProvider;
}());
exports.DeviceAppDataProvider = DeviceAppDataProvider;
$injector.register("deviceAppDataProvider", DeviceAppDataProvider);
