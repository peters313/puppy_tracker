"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var DebugPlatformCommand = (function () {
    function DebugPlatformCommand(debugService, $devicesService, $logger, $options) {
        this.debugService = debugService;
        this.$devicesService = $devicesService;
        this.$logger = $logger;
        this.$options = $options;
        this.allowedParameters = [];
    }
    DebugPlatformCommand.prototype.execute = function (args) {
        return this.debugService.debug();
    };
    DebugPlatformCommand.prototype.canExecute = function (args) {
        var _this = this;
        return (function () {
            _this.$devicesService.initialize({ platform: _this.debugService.platform, deviceId: _this.$options.device }).wait();
            if (_this.$options.emulator || _this.$devicesService.deviceCount === 0) {
                return true;
            }
            if (_this.$devicesService.deviceCount > 1) {
                _this.$options.emulator = true;
                _this.$logger.warn("Multiple devices found! Starting debugger on emulator. If you want to debug on specific device please select device with --device option.".yellow.bold);
            }
            return true;
        }).future()();
    };
    return DebugPlatformCommand;
}());
exports.DebugPlatformCommand = DebugPlatformCommand;
var DebugIOSCommand = (function (_super) {
    __extends(DebugIOSCommand, _super);
    function DebugIOSCommand($iOSDebugService, $devicesService, $logger, $options) {
        _super.call(this, $iOSDebugService, $devicesService, $logger, $options);
    }
    return DebugIOSCommand;
}(DebugPlatformCommand));
exports.DebugIOSCommand = DebugIOSCommand;
$injector.registerCommand("debug|ios", DebugIOSCommand);
var DebugAndroidCommand = (function (_super) {
    __extends(DebugAndroidCommand, _super);
    function DebugAndroidCommand($androidDebugService, $devicesService, $logger, $options) {
        _super.call(this, $androidDebugService, $devicesService, $logger, $options);
    }
    return DebugAndroidCommand;
}(DebugPlatformCommand));
exports.DebugAndroidCommand = DebugAndroidCommand;
$injector.registerCommand("debug|android", DebugAndroidCommand);
