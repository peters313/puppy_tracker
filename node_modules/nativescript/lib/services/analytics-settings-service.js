"use strict";
var helpers_1 = require("../common/helpers");
var AnalyticsSettingsService = (function () {
    function AnalyticsSettingsService($userSettingsService, $staticConfig, $logger) {
        this.$userSettingsService = $userSettingsService;
        this.$staticConfig = $staticConfig;
        this.$logger = $logger;
    }
    AnalyticsSettingsService.prototype.canDoRequest = function () {
        return (function () { return true; }).future()();
    };
    AnalyticsSettingsService.prototype.getUserId = function () {
        var _this = this;
        return (function () {
            var currentUserId = _this.$userSettingsService.getSettingValue("USER_ID").wait();
            if (!currentUserId) {
                currentUserId = helpers_1.createGUID(false);
                _this.$logger.trace("Setting new USER_ID: " + currentUserId + ".");
                _this.$userSettingsService.saveSetting("USER_ID", currentUserId).wait();
            }
            return currentUserId;
        }).future()();
    };
    AnalyticsSettingsService.prototype.getClientName = function () {
        return "" + this.$staticConfig.CLIENT_NAME_ALIAS.cyan.bold;
    };
    AnalyticsSettingsService.prototype.getPrivacyPolicyLink = function () {
        return "http://www.telerik.com/company/privacy-policy";
    };
    AnalyticsSettingsService.prototype.getUserSessionsCount = function (projectName) {
        var _this = this;
        return (function () {
            var oldSessionCount = _this.$userSettingsService.getSettingValue(AnalyticsSettingsService.SESSIONS_STARTED_OBSOLETE_KEY).wait();
            if (oldSessionCount) {
                _this.$userSettingsService.removeSetting(AnalyticsSettingsService.SESSIONS_STARTED_OBSOLETE_KEY).wait();
            }
            return _this.$userSettingsService.getSettingValue(_this.getSessionsProjectKey(projectName)).wait() || oldSessionCount || 0;
        }).future()();
    };
    AnalyticsSettingsService.prototype.setUserSessionsCount = function (count, projectName) {
        return this.$userSettingsService.saveSetting(this.getSessionsProjectKey(projectName), count);
    };
    AnalyticsSettingsService.prototype.getSessionsProjectKey = function (projectName) {
        return "" + AnalyticsSettingsService.SESSIONS_STARTED_KEY_PREFIX + projectName;
    };
    AnalyticsSettingsService.SESSIONS_STARTED_OBSOLETE_KEY = "SESSIONS_STARTED";
    AnalyticsSettingsService.SESSIONS_STARTED_KEY_PREFIX = "SESSIONS_STARTED_";
    return AnalyticsSettingsService;
}());
$injector.register("analyticsSettingsService", AnalyticsSettingsService);
