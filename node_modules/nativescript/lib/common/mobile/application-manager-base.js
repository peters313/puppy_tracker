"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var events_1 = require("events");
var ApplicationManagerBase = (function (_super) {
    __extends(ApplicationManagerBase, _super);
    function ApplicationManagerBase($logger) {
        _super.call(this);
        this.$logger = $logger;
        this.isChecking = false;
    }
    ApplicationManagerBase.prototype.reinstallApplication = function (appIdentifier, packageFilePath) {
        var _this = this;
        return (function () {
            _this.uninstallApplication(appIdentifier).wait();
            _this.installApplication(packageFilePath).wait();
        }).future()();
    };
    ApplicationManagerBase.prototype.restartApplication = function (appIdentifier, bundleExecutable, framework) {
        var _this = this;
        return (function () {
            _this.stopApplication(bundleExecutable || appIdentifier).wait();
            _this.startApplication(appIdentifier, framework).wait();
        }).future()();
    };
    ApplicationManagerBase.prototype.isApplicationInstalled = function (appIdentifier) {
        var _this = this;
        return (function () {
            if (!_this.lastInstalledAppIdentifiers || !_this.lastInstalledAppIdentifiers.length) {
                _this.checkForApplicationUpdates().wait();
            }
            return _.contains(_this.lastInstalledAppIdentifiers, appIdentifier);
        }).future()();
    };
    ApplicationManagerBase.prototype.checkForApplicationUpdates = function () {
        var _this = this;
        return (function () {
            if (!_this.isChecking) {
                try {
                    _this.isChecking = true;
                    var currentlyInstalledAppIdentifiers = _this.getInstalledApplications().wait();
                    var previouslyInstalledAppIdentifiers = _this.lastInstalledAppIdentifiers || [];
                    var newAppIdentifiers = _.difference(currentlyInstalledAppIdentifiers, previouslyInstalledAppIdentifiers);
                    var removedAppIdentifiers = _.difference(previouslyInstalledAppIdentifiers, currentlyInstalledAppIdentifiers);
                    _this.lastInstalledAppIdentifiers = currentlyInstalledAppIdentifiers;
                    _.each(newAppIdentifiers, function (appIdentifier) { return _this.emit("applicationInstalled", appIdentifier); });
                    _.each(removedAppIdentifiers, function (appIdentifier) { return _this.emit("applicationUninstalled", appIdentifier); });
                }
                finally {
                    _this.isChecking = false;
                }
            }
        }).future()();
    };
    ApplicationManagerBase.prototype.tryStartApplication = function (appIdentifier, framework) {
        var _this = this;
        return (function () {
            try {
                if (_this.isApplicationInstalled(appIdentifier).wait() && _this.canStartApplication()) {
                    _this.startApplication(appIdentifier, framework).wait();
                }
            }
            catch (err) {
                _this.$logger.trace("Unable to start application " + appIdentifier + ". Error is: " + err.message);
            }
        }).future()();
    };
    return ApplicationManagerBase;
}(events_1.EventEmitter));
exports.ApplicationManagerBase = ApplicationManagerBase;
