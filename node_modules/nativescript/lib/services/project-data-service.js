"use strict";
var path = require("path");
var assert = require("assert");
var ProjectDataService = (function () {
    function ProjectDataService($fs, $staticConfig, $errors, $logger) {
        this.$fs = $fs;
        this.$staticConfig = $staticConfig;
        this.$errors = $errors;
        this.$logger = $logger;
    }
    ProjectDataService.prototype.initialize = function (projectDir) {
        if (!this.projectFilePath) {
            this.projectFilePath = path.join(projectDir, this.$staticConfig.PROJECT_FILE_NAME);
        }
    };
    ProjectDataService.prototype.getValue = function (propertyName) {
        var _this = this;
        return (function () {
            _this.loadProjectFile().wait();
            return _this.projectData ? _this.projectData[_this.$staticConfig.CLIENT_NAME_KEY_IN_PROJECT_FILE][propertyName] : null;
        }).future()();
    };
    ProjectDataService.prototype.setValue = function (key, value) {
        var _this = this;
        return (function () {
            _this.loadProjectFile().wait();
            if (!_this.projectData[_this.$staticConfig.CLIENT_NAME_KEY_IN_PROJECT_FILE]) {
                _this.projectData[_this.$staticConfig.CLIENT_NAME_KEY_IN_PROJECT_FILE] = Object.create(null);
            }
            _this.projectData[_this.$staticConfig.CLIENT_NAME_KEY_IN_PROJECT_FILE][key] = value;
            _this.$fs.writeJson(_this.projectFilePath, _this.projectData, _this.projectFileIndent).wait();
        }).future()();
    };
    ProjectDataService.prototype.removeProperty = function (propertyName) {
        var _this = this;
        return (function () {
            _this.loadProjectFile().wait();
            delete _this.projectData[_this.$staticConfig.CLIENT_NAME_KEY_IN_PROJECT_FILE][propertyName];
            _this.$fs.writeJson(_this.projectFilePath, _this.projectData, _this.projectFileIndent).wait();
        }).future()();
    };
    ProjectDataService.prototype.removeDependency = function (dependencyName) {
        var _this = this;
        return (function () {
            _this.loadProjectFile().wait();
            delete _this.projectData[ProjectDataService.DEPENDENCIES_KEY_NAME][dependencyName];
            _this.$fs.writeJson(_this.projectFilePath, _this.projectData, _this.projectFileIndent).wait();
        }).future()();
    };
    ProjectDataService.prototype.loadProjectFile = function () {
        var _this = this;
        return (function () {
            assert.ok(_this.projectFilePath, "Initialize method of projectDataService is not called.");
            if (!_this.$fs.exists(_this.projectFilePath).wait()) {
                _this.$fs.writeJson(_this.projectFilePath, {
                    "description": "NativeScript Application",
                    "license": "SEE LICENSE IN <your-license-filename>",
                    "readme": "NativeScript Application",
                    "repository": "<fill-your-repository-here>"
                }).wait();
            }
            var projectFileContent = _this.$fs.readText(_this.projectFilePath).wait();
            _this.projectFileIndent = projectFileContent ? _this.detectIndent(projectFileContent) : "\t";
            _this.projectData = projectFileContent ? JSON.parse(projectFileContent) : Object.create(null);
        }).future()();
    };
    ProjectDataService.prototype.detectIndent = function (content) {
        var leadingSpace = content.match(/(^[ ]+)\S/m);
        if (leadingSpace) {
            return leadingSpace[1].length;
        }
        return "\t";
    };
    ProjectDataService.DEPENDENCIES_KEY_NAME = "dependencies";
    return ProjectDataService;
}());
exports.ProjectDataService = ProjectDataService;
$injector.register("projectDataService", ProjectDataService);
